// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Header component when logged out 1`] = `
<Header>
  <Query
    query={
      Object {
        "definitions": Array [
          Object {
            "directives": Array [],
            "kind": "FragmentDefinition",
            "name": Object {
              "kind": "Name",
              "value": "Image",
            },
            "selectionSet": Object {
              "kind": "SelectionSet",
              "selections": Array [
                Object {
                  "alias": undefined,
                  "arguments": Array [],
                  "directives": Array [],
                  "kind": "Field",
                  "name": Object {
                    "kind": "Name",
                    "value": "id",
                  },
                  "selectionSet": undefined,
                },
                Object {
                  "alias": undefined,
                  "arguments": Array [],
                  "directives": Array [],
                  "kind": "Field",
                  "name": Object {
                    "kind": "Name",
                    "value": "url",
                  },
                  "selectionSet": undefined,
                },
              ],
            },
            "typeCondition": Object {
              "kind": "NamedType",
              "name": Object {
                "kind": "Name",
                "value": "Image",
              },
            },
          },
          Object {
            "directives": Array [],
            "kind": "OperationDefinition",
            "name": Object {
              "kind": "Name",
              "value": "Account",
            },
            "operation": "query",
            "selectionSet": Object {
              "kind": "SelectionSet",
              "selections": Array [
                Object {
                  "alias": undefined,
                  "arguments": Array [],
                  "directives": Array [],
                  "kind": "Field",
                  "name": Object {
                    "kind": "Name",
                    "value": "account",
                  },
                  "selectionSet": Object {
                    "kind": "SelectionSet",
                    "selections": Array [
                      Object {
                        "alias": undefined,
                        "arguments": Array [],
                        "directives": Array [],
                        "kind": "Field",
                        "name": Object {
                          "kind": "Name",
                          "value": "email",
                        },
                        "selectionSet": undefined,
                      },
                      Object {
                        "alias": undefined,
                        "arguments": Array [],
                        "directives": Array [],
                        "kind": "Field",
                        "name": Object {
                          "kind": "Name",
                          "value": "id",
                        },
                        "selectionSet": undefined,
                      },
                      Object {
                        "alias": undefined,
                        "arguments": Array [],
                        "directives": Array [],
                        "kind": "Field",
                        "name": Object {
                          "kind": "Name",
                          "value": "name",
                        },
                        "selectionSet": undefined,
                      },
                      Object {
                        "alias": undefined,
                        "arguments": Array [],
                        "directives": Array [],
                        "kind": "Field",
                        "name": Object {
                          "kind": "Name",
                          "value": "profile",
                        },
                        "selectionSet": Object {
                          "kind": "SelectionSet",
                          "selections": Array [
                            Object {
                              "alias": undefined,
                              "arguments": Array [],
                              "directives": Array [],
                              "kind": "Field",
                              "name": Object {
                                "kind": "Name",
                                "value": "avatar",
                              },
                              "selectionSet": Object {
                                "kind": "SelectionSet",
                                "selections": Array [
                                  Object {
                                    "directives": Array [],
                                    "kind": "FragmentSpread",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "Image",
                                    },
                                  },
                                ],
                              },
                            },
                            Object {
                              "alias": undefined,
                              "arguments": Array [],
                              "directives": Array [],
                              "kind": "Field",
                              "name": Object {
                                "kind": "Name",
                                "value": "id",
                              },
                              "selectionSet": undefined,
                            },
                            Object {
                              "alias": undefined,
                              "arguments": Array [],
                              "directives": Array [],
                              "kind": "Field",
                              "name": Object {
                                "kind": "Name",
                                "value": "name",
                              },
                              "selectionSet": undefined,
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
            "variableDefinitions": Array [],
          },
        ],
        "kind": "Document",
        "loc": Object {
          "end": 220,
          "start": 0,
        },
      }
    }
  >
    <header
      className="Header"
    >
      <Container>
        <div
          className="Container"
        >
          <Link
            className="logo"
            replace={false}
            to="/"
          >
            <a
              className="logo"
              href="/"
              onClick={[Function]}
            >
              Social Network
            </a>
          </Link>
          <div>
            <ButtonLink
              to="/login"
            >
              <Link
                className="ButtonLink"
                replace={false}
                to="/login"
              >
                <a
                  className="ButtonLink"
                  href="/login"
                  onClick={[Function]}
                >
                  <Button$2>
                    <WithStyles(Button)>
                      <Button
                        classes={
                          Object {
                            "colorInherit": "MuiButton-colorInherit-22",
                            "contained": "MuiButton-contained-12",
                            "containedPrimary": "MuiButton-containedPrimary-13",
                            "containedSecondary": "MuiButton-containedSecondary-14",
                            "disabled": "MuiButton-disabled-21",
                            "extendedFab": "MuiButton-extendedFab-19",
                            "fab": "MuiButton-fab-18",
                            "flat": "MuiButton-flat-6",
                            "flatPrimary": "MuiButton-flatPrimary-7",
                            "flatSecondary": "MuiButton-flatSecondary-8",
                            "focusVisible": "MuiButton-focusVisible-20",
                            "fullWidth": "MuiButton-fullWidth-26",
                            "label": "MuiButton-label-2",
                            "mini": "MuiButton-mini-23",
                            "outlined": "MuiButton-outlined-9",
                            "outlinedPrimary": "MuiButton-outlinedPrimary-10",
                            "outlinedSecondary": "MuiButton-outlinedSecondary-11",
                            "raised": "MuiButton-raised-15",
                            "raisedPrimary": "MuiButton-raisedPrimary-16",
                            "raisedSecondary": "MuiButton-raisedSecondary-17",
                            "root": "MuiButton-root-1",
                            "sizeLarge": "MuiButton-sizeLarge-25",
                            "sizeSmall": "MuiButton-sizeSmall-24",
                            "text": "MuiButton-text-3",
                            "textPrimary": "MuiButton-textPrimary-4",
                            "textSecondary": "MuiButton-textSecondary-5",
                          }
                        }
                        color="default"
                        component="button"
                        disableFocusRipple={false}
                        disabled={false}
                        fullWidth={false}
                        mini={false}
                        size="medium"
                        type="button"
                        variant="text"
                      >
                        <WithStyles(ButtonBase)
                          className="MuiButton-root-1 MuiButton-text-3 MuiButton-flat-6"
                          component="button"
                          disabled={false}
                          focusRipple={true}
                          focusVisibleClassName="MuiButton-focusVisible-20"
                          type="button"
                        >
                          <ButtonBase
                            centerRipple={false}
                            className="MuiButton-root-1 MuiButton-text-3 MuiButton-flat-6"
                            classes={
                              Object {
                                "disabled": "MuiButtonBase-disabled-28",
                                "focusVisible": "MuiButtonBase-focusVisible-29",
                                "root": "MuiButtonBase-root-27",
                              }
                            }
                            component="button"
                            disableRipple={false}
                            disableTouchRipple={false}
                            disabled={false}
                            focusRipple={true}
                            focusVisibleClassName="MuiButton-focusVisible-20"
                            tabIndex="0"
                            type="button"
                          >
                            <button
                              className="MuiButtonBase-root-27 MuiButton-root-1 MuiButton-text-3 MuiButton-flat-6"
                              disabled={false}
                              onBlur={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex="0"
                              type="button"
                            >
                              <span
                                className="MuiButton-label-2"
                              >
                                Login
                              </span>
                              <NoSsr
                                defer={false}
                                fallback={null}
                              >
                                <WithStyles(TouchRipple)
                                  center={false}
                                  innerRef={[Function]}
                                >
                                  <TouchRipple
                                    center={false}
                                    classes={
                                      Object {
                                        "child": "MuiTouchRipple-child-34",
                                        "childLeaving": "MuiTouchRipple-childLeaving-35",
                                        "childPulsate": "MuiTouchRipple-childPulsate-36",
                                        "ripple": "MuiTouchRipple-ripple-31",
                                        "ripplePulsate": "MuiTouchRipple-ripplePulsate-33",
                                        "rippleVisible": "MuiTouchRipple-rippleVisible-32",
                                        "root": "MuiTouchRipple-root-30",
                                      }
                                    }
                                  >
                                    <TransitionGroup
                                      childFactory={[Function]}
                                      className="MuiTouchRipple-root-30"
                                      component="span"
                                      enter={true}
                                      exit={true}
                                    >
                                      <span
                                        className="MuiTouchRipple-root-30"
                                      />
                                    </TransitionGroup>
                                  </TouchRipple>
                                </WithStyles(TouchRipple)>
                              </NoSsr>
                            </button>
                          </ButtonBase>
                        </WithStyles(ButtonBase)>
                      </Button>
                    </WithStyles(Button)>
                  </Button$2>
                </a>
              </Link>
            </ButtonLink>
            <ButtonLink
              to="/signup"
            >
              <Link
                className="ButtonLink"
                replace={false}
                to="/signup"
              >
                <a
                  className="ButtonLink"
                  href="/signup"
                  onClick={[Function]}
                >
                  <Button$2>
                    <WithStyles(Button)>
                      <Button
                        classes={
                          Object {
                            "colorInherit": "MuiButton-colorInherit-22",
                            "contained": "MuiButton-contained-12",
                            "containedPrimary": "MuiButton-containedPrimary-13",
                            "containedSecondary": "MuiButton-containedSecondary-14",
                            "disabled": "MuiButton-disabled-21",
                            "extendedFab": "MuiButton-extendedFab-19",
                            "fab": "MuiButton-fab-18",
                            "flat": "MuiButton-flat-6",
                            "flatPrimary": "MuiButton-flatPrimary-7",
                            "flatSecondary": "MuiButton-flatSecondary-8",
                            "focusVisible": "MuiButton-focusVisible-20",
                            "fullWidth": "MuiButton-fullWidth-26",
                            "label": "MuiButton-label-2",
                            "mini": "MuiButton-mini-23",
                            "outlined": "MuiButton-outlined-9",
                            "outlinedPrimary": "MuiButton-outlinedPrimary-10",
                            "outlinedSecondary": "MuiButton-outlinedSecondary-11",
                            "raised": "MuiButton-raised-15",
                            "raisedPrimary": "MuiButton-raisedPrimary-16",
                            "raisedSecondary": "MuiButton-raisedSecondary-17",
                            "root": "MuiButton-root-1",
                            "sizeLarge": "MuiButton-sizeLarge-25",
                            "sizeSmall": "MuiButton-sizeSmall-24",
                            "text": "MuiButton-text-3",
                            "textPrimary": "MuiButton-textPrimary-4",
                            "textSecondary": "MuiButton-textSecondary-5",
                          }
                        }
                        color="default"
                        component="button"
                        disableFocusRipple={false}
                        disabled={false}
                        fullWidth={false}
                        mini={false}
                        size="medium"
                        type="button"
                        variant="text"
                      >
                        <WithStyles(ButtonBase)
                          className="MuiButton-root-1 MuiButton-text-3 MuiButton-flat-6"
                          component="button"
                          disabled={false}
                          focusRipple={true}
                          focusVisibleClassName="MuiButton-focusVisible-20"
                          type="button"
                        >
                          <ButtonBase
                            centerRipple={false}
                            className="MuiButton-root-1 MuiButton-text-3 MuiButton-flat-6"
                            classes={
                              Object {
                                "disabled": "MuiButtonBase-disabled-28",
                                "focusVisible": "MuiButtonBase-focusVisible-29",
                                "root": "MuiButtonBase-root-27",
                              }
                            }
                            component="button"
                            disableRipple={false}
                            disableTouchRipple={false}
                            disabled={false}
                            focusRipple={true}
                            focusVisibleClassName="MuiButton-focusVisible-20"
                            tabIndex="0"
                            type="button"
                          >
                            <button
                              className="MuiButtonBase-root-27 MuiButton-root-1 MuiButton-text-3 MuiButton-flat-6"
                              disabled={false}
                              onBlur={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex="0"
                              type="button"
                            >
                              <span
                                className="MuiButton-label-2"
                              >
                                Signup
                              </span>
                              <NoSsr
                                defer={false}
                                fallback={null}
                              >
                                <WithStyles(TouchRipple)
                                  center={false}
                                  innerRef={[Function]}
                                >
                                  <TouchRipple
                                    center={false}
                                    classes={
                                      Object {
                                        "child": "MuiTouchRipple-child-34",
                                        "childLeaving": "MuiTouchRipple-childLeaving-35",
                                        "childPulsate": "MuiTouchRipple-childPulsate-36",
                                        "ripple": "MuiTouchRipple-ripple-31",
                                        "ripplePulsate": "MuiTouchRipple-ripplePulsate-33",
                                        "rippleVisible": "MuiTouchRipple-rippleVisible-32",
                                        "root": "MuiTouchRipple-root-30",
                                      }
                                    }
                                  >
                                    <TransitionGroup
                                      childFactory={[Function]}
                                      className="MuiTouchRipple-root-30"
                                      component="span"
                                      enter={true}
                                      exit={true}
                                    >
                                      <span
                                        className="MuiTouchRipple-root-30"
                                      />
                                    </TransitionGroup>
                                  </TouchRipple>
                                </WithStyles(TouchRipple)>
                              </NoSsr>
                            </button>
                          </ButtonBase>
                        </WithStyles(ButtonBase)>
                      </Button>
                    </WithStyles(Button)>
                  </Button$2>
                </a>
              </Link>
            </ButtonLink>
          </div>
        </div>
      </Container>
    </header>
  </Query>
</Header>
`;

exports[`Header component while loading 1`] = `
<Header>
  <Query
    query={
      Object {
        "definitions": Array [
          Object {
            "directives": Array [],
            "kind": "FragmentDefinition",
            "name": Object {
              "kind": "Name",
              "value": "Image",
            },
            "selectionSet": Object {
              "kind": "SelectionSet",
              "selections": Array [
                Object {
                  "alias": undefined,
                  "arguments": Array [],
                  "directives": Array [],
                  "kind": "Field",
                  "name": Object {
                    "kind": "Name",
                    "value": "id",
                  },
                  "selectionSet": undefined,
                },
                Object {
                  "alias": undefined,
                  "arguments": Array [],
                  "directives": Array [],
                  "kind": "Field",
                  "name": Object {
                    "kind": "Name",
                    "value": "url",
                  },
                  "selectionSet": undefined,
                },
              ],
            },
            "typeCondition": Object {
              "kind": "NamedType",
              "name": Object {
                "kind": "Name",
                "value": "Image",
              },
            },
          },
          Object {
            "directives": Array [],
            "kind": "OperationDefinition",
            "name": Object {
              "kind": "Name",
              "value": "Account",
            },
            "operation": "query",
            "selectionSet": Object {
              "kind": "SelectionSet",
              "selections": Array [
                Object {
                  "alias": undefined,
                  "arguments": Array [],
                  "directives": Array [],
                  "kind": "Field",
                  "name": Object {
                    "kind": "Name",
                    "value": "account",
                  },
                  "selectionSet": Object {
                    "kind": "SelectionSet",
                    "selections": Array [
                      Object {
                        "alias": undefined,
                        "arguments": Array [],
                        "directives": Array [],
                        "kind": "Field",
                        "name": Object {
                          "kind": "Name",
                          "value": "email",
                        },
                        "selectionSet": undefined,
                      },
                      Object {
                        "alias": undefined,
                        "arguments": Array [],
                        "directives": Array [],
                        "kind": "Field",
                        "name": Object {
                          "kind": "Name",
                          "value": "id",
                        },
                        "selectionSet": undefined,
                      },
                      Object {
                        "alias": undefined,
                        "arguments": Array [],
                        "directives": Array [],
                        "kind": "Field",
                        "name": Object {
                          "kind": "Name",
                          "value": "name",
                        },
                        "selectionSet": undefined,
                      },
                      Object {
                        "alias": undefined,
                        "arguments": Array [],
                        "directives": Array [],
                        "kind": "Field",
                        "name": Object {
                          "kind": "Name",
                          "value": "profile",
                        },
                        "selectionSet": Object {
                          "kind": "SelectionSet",
                          "selections": Array [
                            Object {
                              "alias": undefined,
                              "arguments": Array [],
                              "directives": Array [],
                              "kind": "Field",
                              "name": Object {
                                "kind": "Name",
                                "value": "avatar",
                              },
                              "selectionSet": Object {
                                "kind": "SelectionSet",
                                "selections": Array [
                                  Object {
                                    "directives": Array [],
                                    "kind": "FragmentSpread",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "Image",
                                    },
                                  },
                                ],
                              },
                            },
                            Object {
                              "alias": undefined,
                              "arguments": Array [],
                              "directives": Array [],
                              "kind": "Field",
                              "name": Object {
                                "kind": "Name",
                                "value": "id",
                              },
                              "selectionSet": undefined,
                            },
                            Object {
                              "alias": undefined,
                              "arguments": Array [],
                              "directives": Array [],
                              "kind": "Field",
                              "name": Object {
                                "kind": "Name",
                                "value": "name",
                              },
                              "selectionSet": undefined,
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
            "variableDefinitions": Array [],
          },
        ],
        "kind": "Document",
        "loc": Object {
          "end": 220,
          "start": 0,
        },
      }
    }
  >
    Loading
  </Query>
</Header>
`;
