// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Header component when logged out 1`] = `
<Header>
  <Query
    query={
      Object {
        "definitions": Array [
          Object {
            "directives": Array [],
            "kind": "FragmentDefinition",
            "name": Object {
              "kind": "Name",
              "value": "Image",
            },
            "selectionSet": Object {
              "kind": "SelectionSet",
              "selections": Array [
                Object {
                  "alias": undefined,
                  "arguments": Array [],
                  "directives": Array [],
                  "kind": "Field",
                  "name": Object {
                    "kind": "Name",
                    "value": "id",
                  },
                  "selectionSet": undefined,
                },
                Object {
                  "alias": undefined,
                  "arguments": Array [],
                  "directives": Array [],
                  "kind": "Field",
                  "name": Object {
                    "kind": "Name",
                    "value": "url",
                  },
                  "selectionSet": undefined,
                },
              ],
            },
            "typeCondition": Object {
              "kind": "NamedType",
              "name": Object {
                "kind": "Name",
                "value": "Image",
              },
            },
          },
          Object {
            "directives": Array [],
            "kind": "OperationDefinition",
            "name": Object {
              "kind": "Name",
              "value": "Account",
            },
            "operation": "query",
            "selectionSet": Object {
              "kind": "SelectionSet",
              "selections": Array [
                Object {
                  "alias": undefined,
                  "arguments": Array [],
                  "directives": Array [],
                  "kind": "Field",
                  "name": Object {
                    "kind": "Name",
                    "value": "account",
                  },
                  "selectionSet": Object {
                    "kind": "SelectionSet",
                    "selections": Array [
                      Object {
                        "alias": undefined,
                        "arguments": Array [],
                        "directives": Array [],
                        "kind": "Field",
                        "name": Object {
                          "kind": "Name",
                          "value": "email",
                        },
                        "selectionSet": undefined,
                      },
                      Object {
                        "alias": undefined,
                        "arguments": Array [],
                        "directives": Array [],
                        "kind": "Field",
                        "name": Object {
                          "kind": "Name",
                          "value": "id",
                        },
                        "selectionSet": undefined,
                      },
                      Object {
                        "alias": undefined,
                        "arguments": Array [],
                        "directives": Array [],
                        "kind": "Field",
                        "name": Object {
                          "kind": "Name",
                          "value": "name",
                        },
                        "selectionSet": undefined,
                      },
                      Object {
                        "alias": undefined,
                        "arguments": Array [],
                        "directives": Array [],
                        "kind": "Field",
                        "name": Object {
                          "kind": "Name",
                          "value": "profile",
                        },
                        "selectionSet": Object {
                          "kind": "SelectionSet",
                          "selections": Array [
                            Object {
                              "alias": undefined,
                              "arguments": Array [],
                              "directives": Array [],
                              "kind": "Field",
                              "name": Object {
                                "kind": "Name",
                                "value": "avatar",
                              },
                              "selectionSet": Object {
                                "kind": "SelectionSet",
                                "selections": Array [
                                  Object {
                                    "directives": Array [],
                                    "kind": "FragmentSpread",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "Image",
                                    },
                                  },
                                ],
                              },
                            },
                            Object {
                              "alias": undefined,
                              "arguments": Array [],
                              "directives": Array [],
                              "kind": "Field",
                              "name": Object {
                                "kind": "Name",
                                "value": "id",
                              },
                              "selectionSet": undefined,
                            },
                            Object {
                              "alias": undefined,
                              "arguments": Array [],
                              "directives": Array [],
                              "kind": "Field",
                              "name": Object {
                                "kind": "Name",
                                "value": "name",
                              },
                              "selectionSet": undefined,
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
            "variableDefinitions": Array [],
          },
        ],
        "kind": "Document",
        "loc": Object {
          "end": 220,
          "start": 0,
        },
      }
    }
  >
    <Topbar
      className="Header"
    >
      <WithStyles(Content$2)
        className="Header"
      >
        <Content$2
          className="Header"
          classes={
            Object {
              "topbar": "Content-2-topbar-23",
            }
          }
        >
          <div
            className="Content-2-topbar-23 Header"
          >
            <WithStyles(AppBar)
              color="default"
              position="static"
            >
              <AppBar
                classes={
                  Object {
                    "colorDefault": "MuiAppBar-colorDefault-30",
                    "colorPrimary": "MuiAppBar-colorPrimary-31",
                    "colorSecondary": "MuiAppBar-colorSecondary-32",
                    "positionAbsolute": "MuiAppBar-positionAbsolute-26",
                    "positionFixed": "MuiAppBar-positionFixed-25",
                    "positionRelative": "MuiAppBar-positionRelative-29",
                    "positionStatic": "MuiAppBar-positionStatic-28",
                    "positionSticky": "MuiAppBar-positionSticky-27",
                    "root": "MuiAppBar-root-24",
                  }
                }
                color="default"
                position="static"
              >
                <WithStyles(Paper)
                  className="MuiAppBar-root-24 MuiAppBar-positionStatic-28 MuiAppBar-colorDefault-30"
                  component="header"
                  elevation={4}
                  square={true}
                >
                  <Paper
                    className="MuiAppBar-root-24 MuiAppBar-positionStatic-28 MuiAppBar-colorDefault-30"
                    classes={
                      Object {
                        "elevation0": "MuiPaper-elevation0-35",
                        "elevation1": "MuiPaper-elevation1-36",
                        "elevation10": "MuiPaper-elevation10-45",
                        "elevation11": "MuiPaper-elevation11-46",
                        "elevation12": "MuiPaper-elevation12-47",
                        "elevation13": "MuiPaper-elevation13-48",
                        "elevation14": "MuiPaper-elevation14-49",
                        "elevation15": "MuiPaper-elevation15-50",
                        "elevation16": "MuiPaper-elevation16-51",
                        "elevation17": "MuiPaper-elevation17-52",
                        "elevation18": "MuiPaper-elevation18-53",
                        "elevation19": "MuiPaper-elevation19-54",
                        "elevation2": "MuiPaper-elevation2-37",
                        "elevation20": "MuiPaper-elevation20-55",
                        "elevation21": "MuiPaper-elevation21-56",
                        "elevation22": "MuiPaper-elevation22-57",
                        "elevation23": "MuiPaper-elevation23-58",
                        "elevation24": "MuiPaper-elevation24-59",
                        "elevation3": "MuiPaper-elevation3-38",
                        "elevation4": "MuiPaper-elevation4-39",
                        "elevation5": "MuiPaper-elevation5-40",
                        "elevation6": "MuiPaper-elevation6-41",
                        "elevation7": "MuiPaper-elevation7-42",
                        "elevation8": "MuiPaper-elevation8-43",
                        "elevation9": "MuiPaper-elevation9-44",
                        "root": "MuiPaper-root-33",
                        "rounded": "MuiPaper-rounded-34",
                      }
                    }
                    component="header"
                    elevation={4}
                    square={true}
                  >
                    <header
                      className="MuiPaper-root-33 MuiPaper-elevation4-39 MuiAppBar-root-24 MuiAppBar-positionStatic-28 MuiAppBar-colorDefault-30"
                    >
                      <WithStyles(Toolbar)>
                        <Toolbar
                          classes={
                            Object {
                              "dense": "MuiToolbar-dense-63",
                              "gutters": "MuiToolbar-gutters-61",
                              "regular": "MuiToolbar-regular-62",
                              "root": "MuiToolbar-root-60",
                            }
                          }
                          disableGutters={false}
                          variant="regular"
                        >
                          <div
                            className="MuiToolbar-root-60 MuiToolbar-regular-62 MuiToolbar-gutters-61"
                          >
                            <Container>
                              <div
                                className="Container"
                              >
                                <Link
                                  className="logo"
                                  replace={false}
                                  to="/"
                                >
                                  <a
                                    className="logo"
                                    href="/"
                                    onClick={[Function]}
                                  >
                                    Social Network
                                  </a>
                                </Link>
                                <div>
                                  <ButtonLink
                                    to="/login"
                                  >
                                    <Link
                                      className="ButtonLink"
                                      replace={false}
                                      to="/login"
                                    >
                                      <a
                                        className="ButtonLink"
                                        href="/login"
                                        onClick={[Function]}
                                      >
                                        <Button$2>
                                          <WithStyles(Button)>
                                            <Button
                                              classes={
                                                Object {
                                                  "colorInherit": "MuiButton-colorInherit-85",
                                                  "contained": "MuiButton-contained-75",
                                                  "containedPrimary": "MuiButton-containedPrimary-76",
                                                  "containedSecondary": "MuiButton-containedSecondary-77",
                                                  "disabled": "MuiButton-disabled-84",
                                                  "extendedFab": "MuiButton-extendedFab-82",
                                                  "fab": "MuiButton-fab-81",
                                                  "flat": "MuiButton-flat-69",
                                                  "flatPrimary": "MuiButton-flatPrimary-70",
                                                  "flatSecondary": "MuiButton-flatSecondary-71",
                                                  "focusVisible": "MuiButton-focusVisible-83",
                                                  "fullWidth": "MuiButton-fullWidth-89",
                                                  "label": "MuiButton-label-65",
                                                  "mini": "MuiButton-mini-86",
                                                  "outlined": "MuiButton-outlined-72",
                                                  "outlinedPrimary": "MuiButton-outlinedPrimary-73",
                                                  "outlinedSecondary": "MuiButton-outlinedSecondary-74",
                                                  "raised": "MuiButton-raised-78",
                                                  "raisedPrimary": "MuiButton-raisedPrimary-79",
                                                  "raisedSecondary": "MuiButton-raisedSecondary-80",
                                                  "root": "MuiButton-root-64",
                                                  "sizeLarge": "MuiButton-sizeLarge-88",
                                                  "sizeSmall": "MuiButton-sizeSmall-87",
                                                  "text": "MuiButton-text-66",
                                                  "textPrimary": "MuiButton-textPrimary-67",
                                                  "textSecondary": "MuiButton-textSecondary-68",
                                                }
                                              }
                                              color="default"
                                              component="button"
                                              disableFocusRipple={false}
                                              disabled={false}
                                              fullWidth={false}
                                              mini={false}
                                              size="medium"
                                              type="button"
                                              variant="text"
                                            >
                                              <WithStyles(ButtonBase)
                                                className="MuiButton-root-64 MuiButton-text-66 MuiButton-flat-69"
                                                component="button"
                                                disabled={false}
                                                focusRipple={true}
                                                focusVisibleClassName="MuiButton-focusVisible-83"
                                                type="button"
                                              >
                                                <ButtonBase
                                                  centerRipple={false}
                                                  className="MuiButton-root-64 MuiButton-text-66 MuiButton-flat-69"
                                                  classes={
                                                    Object {
                                                      "disabled": "MuiButtonBase-disabled-91",
                                                      "focusVisible": "MuiButtonBase-focusVisible-92",
                                                      "root": "MuiButtonBase-root-90",
                                                    }
                                                  }
                                                  component="button"
                                                  disableRipple={false}
                                                  disableTouchRipple={false}
                                                  disabled={false}
                                                  focusRipple={true}
                                                  focusVisibleClassName="MuiButton-focusVisible-83"
                                                  tabIndex="0"
                                                  type="button"
                                                >
                                                  <button
                                                    className="MuiButtonBase-root-90 MuiButton-root-64 MuiButton-text-66 MuiButton-flat-69"
                                                    disabled={false}
                                                    onBlur={[Function]}
                                                    onFocus={[Function]}
                                                    onKeyDown={[Function]}
                                                    onKeyUp={[Function]}
                                                    onMouseDown={[Function]}
                                                    onMouseLeave={[Function]}
                                                    onMouseUp={[Function]}
                                                    onTouchEnd={[Function]}
                                                    onTouchMove={[Function]}
                                                    onTouchStart={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <span
                                                      className="MuiButton-label-65"
                                                    >
                                                      Login
                                                    </span>
                                                    <NoSsr
                                                      defer={false}
                                                      fallback={null}
                                                    >
                                                      <WithStyles(TouchRipple)
                                                        center={false}
                                                        innerRef={[Function]}
                                                      >
                                                        <TouchRipple
                                                          center={false}
                                                          classes={
                                                            Object {
                                                              "child": "MuiTouchRipple-child-97",
                                                              "childLeaving": "MuiTouchRipple-childLeaving-98",
                                                              "childPulsate": "MuiTouchRipple-childPulsate-99",
                                                              "ripple": "MuiTouchRipple-ripple-94",
                                                              "ripplePulsate": "MuiTouchRipple-ripplePulsate-96",
                                                              "rippleVisible": "MuiTouchRipple-rippleVisible-95",
                                                              "root": "MuiTouchRipple-root-93",
                                                            }
                                                          }
                                                        >
                                                          <TransitionGroup
                                                            childFactory={[Function]}
                                                            className="MuiTouchRipple-root-93"
                                                            component="span"
                                                            enter={true}
                                                            exit={true}
                                                          >
                                                            <span
                                                              className="MuiTouchRipple-root-93"
                                                            />
                                                          </TransitionGroup>
                                                        </TouchRipple>
                                                      </WithStyles(TouchRipple)>
                                                    </NoSsr>
                                                  </button>
                                                </ButtonBase>
                                              </WithStyles(ButtonBase)>
                                            </Button>
                                          </WithStyles(Button)>
                                        </Button$2>
                                      </a>
                                    </Link>
                                  </ButtonLink>
                                  <ButtonLink
                                    to="/signup"
                                  >
                                    <Link
                                      className="ButtonLink"
                                      replace={false}
                                      to="/signup"
                                    >
                                      <a
                                        className="ButtonLink"
                                        href="/signup"
                                        onClick={[Function]}
                                      >
                                        <Button$2>
                                          <WithStyles(Button)>
                                            <Button
                                              classes={
                                                Object {
                                                  "colorInherit": "MuiButton-colorInherit-85",
                                                  "contained": "MuiButton-contained-75",
                                                  "containedPrimary": "MuiButton-containedPrimary-76",
                                                  "containedSecondary": "MuiButton-containedSecondary-77",
                                                  "disabled": "MuiButton-disabled-84",
                                                  "extendedFab": "MuiButton-extendedFab-82",
                                                  "fab": "MuiButton-fab-81",
                                                  "flat": "MuiButton-flat-69",
                                                  "flatPrimary": "MuiButton-flatPrimary-70",
                                                  "flatSecondary": "MuiButton-flatSecondary-71",
                                                  "focusVisible": "MuiButton-focusVisible-83",
                                                  "fullWidth": "MuiButton-fullWidth-89",
                                                  "label": "MuiButton-label-65",
                                                  "mini": "MuiButton-mini-86",
                                                  "outlined": "MuiButton-outlined-72",
                                                  "outlinedPrimary": "MuiButton-outlinedPrimary-73",
                                                  "outlinedSecondary": "MuiButton-outlinedSecondary-74",
                                                  "raised": "MuiButton-raised-78",
                                                  "raisedPrimary": "MuiButton-raisedPrimary-79",
                                                  "raisedSecondary": "MuiButton-raisedSecondary-80",
                                                  "root": "MuiButton-root-64",
                                                  "sizeLarge": "MuiButton-sizeLarge-88",
                                                  "sizeSmall": "MuiButton-sizeSmall-87",
                                                  "text": "MuiButton-text-66",
                                                  "textPrimary": "MuiButton-textPrimary-67",
                                                  "textSecondary": "MuiButton-textSecondary-68",
                                                }
                                              }
                                              color="default"
                                              component="button"
                                              disableFocusRipple={false}
                                              disabled={false}
                                              fullWidth={false}
                                              mini={false}
                                              size="medium"
                                              type="button"
                                              variant="text"
                                            >
                                              <WithStyles(ButtonBase)
                                                className="MuiButton-root-64 MuiButton-text-66 MuiButton-flat-69"
                                                component="button"
                                                disabled={false}
                                                focusRipple={true}
                                                focusVisibleClassName="MuiButton-focusVisible-83"
                                                type="button"
                                              >
                                                <ButtonBase
                                                  centerRipple={false}
                                                  className="MuiButton-root-64 MuiButton-text-66 MuiButton-flat-69"
                                                  classes={
                                                    Object {
                                                      "disabled": "MuiButtonBase-disabled-91",
                                                      "focusVisible": "MuiButtonBase-focusVisible-92",
                                                      "root": "MuiButtonBase-root-90",
                                                    }
                                                  }
                                                  component="button"
                                                  disableRipple={false}
                                                  disableTouchRipple={false}
                                                  disabled={false}
                                                  focusRipple={true}
                                                  focusVisibleClassName="MuiButton-focusVisible-83"
                                                  tabIndex="0"
                                                  type="button"
                                                >
                                                  <button
                                                    className="MuiButtonBase-root-90 MuiButton-root-64 MuiButton-text-66 MuiButton-flat-69"
                                                    disabled={false}
                                                    onBlur={[Function]}
                                                    onFocus={[Function]}
                                                    onKeyDown={[Function]}
                                                    onKeyUp={[Function]}
                                                    onMouseDown={[Function]}
                                                    onMouseLeave={[Function]}
                                                    onMouseUp={[Function]}
                                                    onTouchEnd={[Function]}
                                                    onTouchMove={[Function]}
                                                    onTouchStart={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <span
                                                      className="MuiButton-label-65"
                                                    >
                                                      Signup
                                                    </span>
                                                    <NoSsr
                                                      defer={false}
                                                      fallback={null}
                                                    >
                                                      <WithStyles(TouchRipple)
                                                        center={false}
                                                        innerRef={[Function]}
                                                      >
                                                        <TouchRipple
                                                          center={false}
                                                          classes={
                                                            Object {
                                                              "child": "MuiTouchRipple-child-97",
                                                              "childLeaving": "MuiTouchRipple-childLeaving-98",
                                                              "childPulsate": "MuiTouchRipple-childPulsate-99",
                                                              "ripple": "MuiTouchRipple-ripple-94",
                                                              "ripplePulsate": "MuiTouchRipple-ripplePulsate-96",
                                                              "rippleVisible": "MuiTouchRipple-rippleVisible-95",
                                                              "root": "MuiTouchRipple-root-93",
                                                            }
                                                          }
                                                        >
                                                          <TransitionGroup
                                                            childFactory={[Function]}
                                                            className="MuiTouchRipple-root-93"
                                                            component="span"
                                                            enter={true}
                                                            exit={true}
                                                          >
                                                            <span
                                                              className="MuiTouchRipple-root-93"
                                                            />
                                                          </TransitionGroup>
                                                        </TouchRipple>
                                                      </WithStyles(TouchRipple)>
                                                    </NoSsr>
                                                  </button>
                                                </ButtonBase>
                                              </WithStyles(ButtonBase)>
                                            </Button>
                                          </WithStyles(Button)>
                                        </Button$2>
                                      </a>
                                    </Link>
                                  </ButtonLink>
                                </div>
                              </div>
                            </Container>
                          </div>
                        </Toolbar>
                      </WithStyles(Toolbar)>
                    </header>
                  </Paper>
                </WithStyles(Paper)>
              </AppBar>
            </WithStyles(AppBar)>
          </div>
        </Content$2>
      </WithStyles(Content$2)>
    </Topbar>
  </Query>
</Header>
`;

exports[`Header component while loading 1`] = `
<Header>
  <Query
    query={
      Object {
        "definitions": Array [
          Object {
            "directives": Array [],
            "kind": "FragmentDefinition",
            "name": Object {
              "kind": "Name",
              "value": "Image",
            },
            "selectionSet": Object {
              "kind": "SelectionSet",
              "selections": Array [
                Object {
                  "alias": undefined,
                  "arguments": Array [],
                  "directives": Array [],
                  "kind": "Field",
                  "name": Object {
                    "kind": "Name",
                    "value": "id",
                  },
                  "selectionSet": undefined,
                },
                Object {
                  "alias": undefined,
                  "arguments": Array [],
                  "directives": Array [],
                  "kind": "Field",
                  "name": Object {
                    "kind": "Name",
                    "value": "url",
                  },
                  "selectionSet": undefined,
                },
              ],
            },
            "typeCondition": Object {
              "kind": "NamedType",
              "name": Object {
                "kind": "Name",
                "value": "Image",
              },
            },
          },
          Object {
            "directives": Array [],
            "kind": "OperationDefinition",
            "name": Object {
              "kind": "Name",
              "value": "Account",
            },
            "operation": "query",
            "selectionSet": Object {
              "kind": "SelectionSet",
              "selections": Array [
                Object {
                  "alias": undefined,
                  "arguments": Array [],
                  "directives": Array [],
                  "kind": "Field",
                  "name": Object {
                    "kind": "Name",
                    "value": "account",
                  },
                  "selectionSet": Object {
                    "kind": "SelectionSet",
                    "selections": Array [
                      Object {
                        "alias": undefined,
                        "arguments": Array [],
                        "directives": Array [],
                        "kind": "Field",
                        "name": Object {
                          "kind": "Name",
                          "value": "email",
                        },
                        "selectionSet": undefined,
                      },
                      Object {
                        "alias": undefined,
                        "arguments": Array [],
                        "directives": Array [],
                        "kind": "Field",
                        "name": Object {
                          "kind": "Name",
                          "value": "id",
                        },
                        "selectionSet": undefined,
                      },
                      Object {
                        "alias": undefined,
                        "arguments": Array [],
                        "directives": Array [],
                        "kind": "Field",
                        "name": Object {
                          "kind": "Name",
                          "value": "name",
                        },
                        "selectionSet": undefined,
                      },
                      Object {
                        "alias": undefined,
                        "arguments": Array [],
                        "directives": Array [],
                        "kind": "Field",
                        "name": Object {
                          "kind": "Name",
                          "value": "profile",
                        },
                        "selectionSet": Object {
                          "kind": "SelectionSet",
                          "selections": Array [
                            Object {
                              "alias": undefined,
                              "arguments": Array [],
                              "directives": Array [],
                              "kind": "Field",
                              "name": Object {
                                "kind": "Name",
                                "value": "avatar",
                              },
                              "selectionSet": Object {
                                "kind": "SelectionSet",
                                "selections": Array [
                                  Object {
                                    "directives": Array [],
                                    "kind": "FragmentSpread",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "Image",
                                    },
                                  },
                                ],
                              },
                            },
                            Object {
                              "alias": undefined,
                              "arguments": Array [],
                              "directives": Array [],
                              "kind": "Field",
                              "name": Object {
                                "kind": "Name",
                                "value": "id",
                              },
                              "selectionSet": undefined,
                            },
                            Object {
                              "alias": undefined,
                              "arguments": Array [],
                              "directives": Array [],
                              "kind": "Field",
                              "name": Object {
                                "kind": "Name",
                                "value": "name",
                              },
                              "selectionSet": undefined,
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
            "variableDefinitions": Array [],
          },
        ],
        "kind": "Document",
        "loc": Object {
          "end": 220,
          "start": 0,
        },
      }
    }
  >
    <Loading>
      <WithStyles(Content)>
        <Content
          classes={
            Object {
              "loading": "Content-loading-1",
              "progress": "Content-progress-2",
            }
          }
        >
          <div
            className="Content-loading-1"
          >
            <WithStyles(CircularProgress)
              className="Content-progress-2"
            >
              <CircularProgress
                className="Content-progress-2"
                classes={
                  Object {
                    "circle": "MuiCircularProgress-circle-9",
                    "circleIndeterminate": "MuiCircularProgress-circleIndeterminate-11",
                    "circleStatic": "MuiCircularProgress-circleStatic-10",
                    "colorPrimary": "MuiCircularProgress-colorPrimary-6",
                    "colorSecondary": "MuiCircularProgress-colorSecondary-7",
                    "indeterminate": "MuiCircularProgress-indeterminate-5",
                    "root": "MuiCircularProgress-root-3",
                    "static": "MuiCircularProgress-static-4",
                    "svg": "MuiCircularProgress-svg-8",
                  }
                }
                color="primary"
                size={40}
                thickness={3.6}
                value={0}
                variant="indeterminate"
              >
                <div
                  className="MuiCircularProgress-root-3 MuiCircularProgress-colorPrimary-6 MuiCircularProgress-indeterminate-5 Content-progress-2"
                  role="progressbar"
                  style={
                    Object {
                      "height": 40,
                      "width": 40,
                    }
                  }
                >
                  <svg
                    className="MuiCircularProgress-svg-8"
                    viewBox="22 22 44 44"
                  >
                    <circle
                      className="MuiCircularProgress-circle-9 MuiCircularProgress-circleIndeterminate-11"
                      cx={44}
                      cy={44}
                      fill="none"
                      r={20.2}
                      strokeWidth={3.6}
                      style={Object {}}
                    />
                  </svg>
                </div>
              </CircularProgress>
            </WithStyles(CircularProgress)>
          </div>
        </Content>
      </WithStyles(Content)>
    </Loading>
  </Query>
</Header>
`;
