// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import {
  Account,
  Profile,
  Image,
  Post
} from "../../../data-model/generated/prisma-client";
import { LoginPayload } from "../server/models/types";
import { Context } from "../server/context/types";

type ProfileOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ProfileWhereInput {
    account: AccountWhereInput | null;
    avatar: ImageWhereInput | null;
    followers_every: ProfileWhereInput | null;
    followers_some: ProfileWhereInput | null;
    followers_none: ProfileWhereInput | null;
    following_every: ProfileWhereInput | null;
    following_some: ProfileWhereInput | null;
    following_none: ProfileWhereInput | null;
    id: string | null;
    id_not: string | null;
    id_in: string[];
    id_not_in: string[];
    id_lt: string | null;
    id_lte: string | null;
    id_gt: string | null;
    id_gte: string | null;
    id_contains: string | null;
    id_not_contains: string | null;
    id_starts_with: string | null;
    id_not_starts_with: string | null;
    id_ends_with: string | null;
    id_not_ends_with: string | null;
    name: string | null;
    name_not: string | null;
    name_in: string[];
    name_not_in: string[];
    name_lt: string | null;
    name_lte: string | null;
    name_gt: string | null;
    name_gte: string | null;
    name_contains: string | null;
    name_not_contains: string | null;
    name_starts_with: string | null;
    name_not_starts_with: string | null;
    name_ends_with: string | null;
    name_not_ends_with: string | null;
    posts_every: PostWhereInput | null;
    posts_some: PostWhereInput | null;
    posts_none: PostWhereInput | null;
    AND: ProfileWhereInput[];
    OR: ProfileWhereInput[];
    NOT: ProfileWhereInput[];
  }
  export interface AccountWhereInput {
    email: string | null;
    email_not: string | null;
    email_in: string[];
    email_not_in: string[];
    email_lt: string | null;
    email_lte: string | null;
    email_gt: string | null;
    email_gte: string | null;
    email_contains: string | null;
    email_not_contains: string | null;
    email_starts_with: string | null;
    email_not_starts_with: string | null;
    email_ends_with: string | null;
    email_not_ends_with: string | null;
    id: string | null;
    id_not: string | null;
    id_in: string[];
    id_not_in: string[];
    id_lt: string | null;
    id_lte: string | null;
    id_gt: string | null;
    id_gte: string | null;
    id_contains: string | null;
    id_not_contains: string | null;
    id_starts_with: string | null;
    id_not_starts_with: string | null;
    id_ends_with: string | null;
    id_not_ends_with: string | null;
    name: string | null;
    name_not: string | null;
    name_in: string[];
    name_not_in: string[];
    name_lt: string | null;
    name_lte: string | null;
    name_gt: string | null;
    name_gte: string | null;
    name_contains: string | null;
    name_not_contains: string | null;
    name_starts_with: string | null;
    name_not_starts_with: string | null;
    name_ends_with: string | null;
    name_not_ends_with: string | null;
    password: string | null;
    password_not: string | null;
    password_in: string[];
    password_not_in: string[];
    password_lt: string | null;
    password_lte: string | null;
    password_gt: string | null;
    password_gte: string | null;
    password_contains: string | null;
    password_not_contains: string | null;
    password_starts_with: string | null;
    password_not_starts_with: string | null;
    password_ends_with: string | null;
    password_not_ends_with: string | null;
    profile: ProfileWhereInput | null;
    AND: AccountWhereInput[];
    OR: AccountWhereInput[];
    NOT: AccountWhereInput[];
  }
  export interface ImageWhereInput {
    id: string | null;
    id_not: string | null;
    id_in: string[];
    id_not_in: string[];
    id_lt: string | null;
    id_lte: string | null;
    id_gt: string | null;
    id_gte: string | null;
    id_contains: string | null;
    id_not_contains: string | null;
    id_starts_with: string | null;
    id_not_starts_with: string | null;
    id_ends_with: string | null;
    id_not_ends_with: string | null;
    url: string | null;
    url_not: string | null;
    url_in: string[];
    url_not_in: string[];
    url_lt: string | null;
    url_lte: string | null;
    url_gt: string | null;
    url_gte: string | null;
    url_contains: string | null;
    url_not_contains: string | null;
    url_starts_with: string | null;
    url_not_starts_with: string | null;
    url_ends_with: string | null;
    url_not_ends_with: string | null;
    AND: ImageWhereInput[];
    OR: ImageWhereInput[];
    NOT: ImageWhereInput[];
  }
  export interface PostWhereInput {
    createdAt: string | null;
    createdAt_not: string | null;
    createdAt_in: string[];
    createdAt_not_in: string[];
    createdAt_lt: string | null;
    createdAt_lte: string | null;
    createdAt_gt: string | null;
    createdAt_gte: string | null;
    createdBy: ProfileWhereInput | null;
    id: string | null;
    id_not: string | null;
    id_in: string[];
    id_not_in: string[];
    id_lt: string | null;
    id_lte: string | null;
    id_gt: string | null;
    id_gte: string | null;
    id_contains: string | null;
    id_not_contains: string | null;
    id_starts_with: string | null;
    id_not_starts_with: string | null;
    id_ends_with: string | null;
    id_not_ends_with: string | null;
    text: string | null;
    text_not: string | null;
    text_in: string[];
    text_not_in: string[];
    text_lt: string | null;
    text_lte: string | null;
    text_gt: string | null;
    text_gte: string | null;
    text_contains: string | null;
    text_not_contains: string | null;
    text_starts_with: string | null;
    text_not_starts_with: string | null;
    text_ends_with: string | null;
    text_not_ends_with: string | null;
    AND: PostWhereInput[];
    OR: PostWhereInput[];
    NOT: PostWhereInput[];
  }

  export interface ArgsProfile {
    id: string;
  }

  export interface ArgsProfiles {
    after: string | null;
    before: string | null;
    first: number | null;
    last: number | null;
    orderBy: ProfileOrderByInput | null;
    skip: number | null;
    where: ProfileWhereInput | null;
  }

  export type AccountResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Account | null | Promise<Account | null>;

  export type ProfileResolver = (
    parent: undefined,
    args: ArgsProfile,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Profile | null | Promise<Profile | null>;

  export type ProfilesResolver = (
    parent: undefined,
    args: ArgsProfiles,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Profile[] | Promise<Profile[]>;

  export interface Type {
    account: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Account | null | Promise<Account | null>;

    profile: (
      parent: undefined,
      args: ArgsProfile,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Profile | null | Promise<Profile | null>;

    profiles: (
      parent: undefined,
      args: ArgsProfiles,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Profile[] | Promise<Profile[]>;
  }
}

export namespace AccountResolvers {
  export const defaultResolvers = {
    email: (parent: Account) => parent.email,
    id: (parent: Account) => parent.id,
    name: (parent: Account) => parent.name
  };

  export type EmailResolver = (
    parent: Account,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type IdResolver = (
    parent: Account,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: Account,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type ProfileResolver = (
    parent: Account,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Profile | Promise<Profile>;

  export interface Type {
    email: (
      parent: Account,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    id: (
      parent: Account,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: Account,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    profile: (
      parent: Account,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Profile | Promise<Profile>;
  }
}

export namespace ProfileResolvers {
  export const defaultResolvers = {
    id: (parent: Profile) => parent.id,
    name: (parent: Profile) => parent.name
  };

  export type AvatarResolver = (
    parent: Profile,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Image | null | Promise<Image | null>;

  export type FollowersResolver = (
    parent: Profile,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Profile[] | Promise<Profile[]>;

  export type FollowingResolver = (
    parent: Profile,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Profile[] | Promise<Profile[]>;

  export type IdResolver = (
    parent: Profile,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: Profile,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type PostsResolver = (
    parent: Profile,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Post[] | Promise<Post[]>;

  export interface Type {
    avatar: (
      parent: Profile,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Image | null | Promise<Image | null>;

    followers: (
      parent: Profile,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Profile[] | Promise<Profile[]>;

    following: (
      parent: Profile,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Profile[] | Promise<Profile[]>;

    id: (
      parent: Profile,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: Profile,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    posts: (
      parent: Profile,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Post[] | Promise<Post[]>;
  }
}

export namespace ImageResolvers {
  export const defaultResolvers = {
    id: (parent: Image) => parent.id,
    url: (parent: Image) => parent.url
  };

  export type IdResolver = (
    parent: Image,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UrlResolver = (
    parent: Image,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: Image,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    url: (
      parent: Image,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace PostResolvers {
  export const defaultResolvers = {
    createdAt: (parent: Post) => parent.createdAt,
    id: (parent: Post) => parent.id,
    text: (parent: Post) => parent.text
  };

  export type CreatedAtResolver = (
    parent: Post,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type CreatedByResolver = (
    parent: Post,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Profile | Promise<Profile>;

  export type IdResolver = (
    parent: Post,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type TextResolver = (
    parent: Post,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    createdAt: (
      parent: Post,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    createdBy: (
      parent: Post,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Profile | Promise<Profile>;

    id: (
      parent: Post,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    text: (
      parent: Post,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface AccountUpdateInput {
    email: string | null;
  }
  export interface PasswordUpdateInput {
    currentPassword: string;
    newPassword: string;
  }
  export interface ProfileUpdateInput {
    avatarUrl: string | null;
    followers: ProfileUpdateManyWithoutFollowingInput | null;
    following: ProfileUpdateManyWithoutFollowersInput | null;
    name: string | null;
  }
  export interface ProfileUpdateManyWithoutFollowingInput {
    create: ProfileCreateWithoutFollowingInput[];
    delete: ProfileWhereUniqueInput[];
    connect: ProfileWhereUniqueInput[];
    disconnect: ProfileWhereUniqueInput[];
    update: ProfileUpdateWithWhereUniqueWithoutFollowingInput[];
    upsert: ProfileUpsertWithWhereUniqueWithoutFollowingInput[];
  }
  export interface ProfileCreateWithoutFollowingInput {
    account: AccountCreateOneWithoutProfileInput;
    avatar: ImageCreateOneInput | null;
    followers: ProfileCreateManyWithoutFollowingInput | null;
    name: string;
    posts: PostCreateManyWithoutCreatedByInput | null;
  }
  export interface AccountCreateOneWithoutProfileInput {
    create: AccountCreateWithoutProfileInput | null;
    connect: AccountWhereUniqueInput | null;
  }
  export interface AccountCreateWithoutProfileInput {
    email: string;
    name: string;
    password: string;
  }
  export interface AccountWhereUniqueInput {
    email: string | null;
    id: string | null;
  }
  export interface ImageCreateOneInput {
    create: ImageCreateInput | null;
    connect: ImageWhereUniqueInput | null;
  }
  export interface ImageCreateInput {
    url: string;
  }
  export interface ImageWhereUniqueInput {
    id: string | null;
  }
  export interface ProfileCreateManyWithoutFollowingInput {
    create: ProfileCreateWithoutFollowingInput[];
    connect: ProfileWhereUniqueInput[];
  }
  export interface ProfileWhereUniqueInput {
    id: string | null;
  }
  export interface PostCreateManyWithoutCreatedByInput {
    create: PostCreateWithoutCreatedByInput[];
    connect: PostWhereUniqueInput[];
  }
  export interface PostCreateWithoutCreatedByInput {
    text: string;
  }
  export interface PostWhereUniqueInput {
    id: string | null;
  }
  export interface ProfileUpdateWithWhereUniqueWithoutFollowingInput {
    where: ProfileWhereUniqueInput;
    data: ProfileUpdateWithoutFollowingDataInput;
  }
  export interface ProfileUpdateWithoutFollowingDataInput {
    account: AccountUpdateOneRequiredWithoutProfileInput | null;
    avatar: ImageUpdateOneInput | null;
    followers: ProfileUpdateManyWithoutFollowingInput | null;
    name: string | null;
    posts: PostUpdateManyWithoutCreatedByInput | null;
  }
  export interface AccountUpdateOneRequiredWithoutProfileInput {
    create: AccountCreateWithoutProfileInput | null;
    update: AccountUpdateWithoutProfileDataInput | null;
    upsert: AccountUpsertWithoutProfileInput | null;
    connect: AccountWhereUniqueInput | null;
  }
  export interface AccountUpdateWithoutProfileDataInput {
    email: string | null;
    name: string | null;
    password: string | null;
  }
  export interface AccountUpsertWithoutProfileInput {
    update: AccountUpdateWithoutProfileDataInput;
    create: AccountCreateWithoutProfileInput;
  }
  export interface ImageUpdateOneInput {
    create: ImageCreateInput | null;
    update: ImageUpdateDataInput | null;
    upsert: ImageUpsertNestedInput | null;
    delete: boolean | null;
    disconnect: boolean | null;
    connect: ImageWhereUniqueInput | null;
  }
  export interface ImageUpdateDataInput {
    url: string | null;
  }
  export interface ImageUpsertNestedInput {
    update: ImageUpdateDataInput;
    create: ImageCreateInput;
  }
  export interface PostUpdateManyWithoutCreatedByInput {
    create: PostCreateWithoutCreatedByInput[];
    delete: PostWhereUniqueInput[];
    connect: PostWhereUniqueInput[];
    disconnect: PostWhereUniqueInput[];
    update: PostUpdateWithWhereUniqueWithoutCreatedByInput[];
    upsert: PostUpsertWithWhereUniqueWithoutCreatedByInput[];
  }
  export interface PostUpdateWithWhereUniqueWithoutCreatedByInput {
    where: PostWhereUniqueInput;
    data: PostUpdateWithoutCreatedByDataInput;
  }
  export interface PostUpdateWithoutCreatedByDataInput {
    text: string | null;
  }
  export interface PostUpsertWithWhereUniqueWithoutCreatedByInput {
    where: PostWhereUniqueInput;
    update: PostUpdateWithoutCreatedByDataInput;
    create: PostCreateWithoutCreatedByInput;
  }
  export interface ProfileUpsertWithWhereUniqueWithoutFollowingInput {
    where: ProfileWhereUniqueInput;
    update: ProfileUpdateWithoutFollowingDataInput;
    create: ProfileCreateWithoutFollowingInput;
  }
  export interface ProfileUpdateManyWithoutFollowersInput {
    create: ProfileCreateWithoutFollowersInput[];
    delete: ProfileWhereUniqueInput[];
    connect: ProfileWhereUniqueInput[];
    disconnect: ProfileWhereUniqueInput[];
    update: ProfileUpdateWithWhereUniqueWithoutFollowersInput[];
    upsert: ProfileUpsertWithWhereUniqueWithoutFollowersInput[];
  }
  export interface ProfileCreateWithoutFollowersInput {
    account: AccountCreateOneWithoutProfileInput;
    avatar: ImageCreateOneInput | null;
    following: ProfileCreateManyWithoutFollowersInput | null;
    name: string;
    posts: PostCreateManyWithoutCreatedByInput | null;
  }
  export interface ProfileCreateManyWithoutFollowersInput {
    create: ProfileCreateWithoutFollowersInput[];
    connect: ProfileWhereUniqueInput[];
  }
  export interface ProfileUpdateWithWhereUniqueWithoutFollowersInput {
    where: ProfileWhereUniqueInput;
    data: ProfileUpdateWithoutFollowersDataInput;
  }
  export interface ProfileUpdateWithoutFollowersDataInput {
    account: AccountUpdateOneRequiredWithoutProfileInput | null;
    avatar: ImageUpdateOneInput | null;
    following: ProfileUpdateManyWithoutFollowersInput | null;
    name: string | null;
    posts: PostUpdateManyWithoutCreatedByInput | null;
  }
  export interface ProfileUpsertWithWhereUniqueWithoutFollowersInput {
    where: ProfileWhereUniqueInput;
    update: ProfileUpdateWithoutFollowersDataInput;
    create: ProfileCreateWithoutFollowersInput;
  }

  export interface ArgsCreatePost {
    text: string;
  }

  export interface ArgsDeletePost {
    id: string;
  }

  export interface ArgsLogin {
    email: string;
    password: string;
  }

  export interface ArgsSignup {
    email: string;
    name: string;
    password: string;
  }

  export interface ArgsUpdateAccount {
    data: AccountUpdateInput | null;
  }

  export interface ArgsUpdatePassword {
    data: PasswordUpdateInput | null;
  }

  export interface ArgsUpdateProfile {
    data: ProfileUpdateInput;
  }

  export type CreatePostResolver = (
    parent: undefined,
    args: ArgsCreatePost,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Post | Promise<Post>;

  export type DeletePostResolver = (
    parent: undefined,
    args: ArgsDeletePost,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Post | Promise<Post>;

  export type LoginResolver = (
    parent: undefined,
    args: ArgsLogin,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => LoginPayload | Promise<LoginPayload>;

  export type SignupResolver = (
    parent: undefined,
    args: ArgsSignup,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => LoginPayload | Promise<LoginPayload>;

  export type UpdateAccountResolver = (
    parent: undefined,
    args: ArgsUpdateAccount,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Account | Promise<Account>;

  export type UpdatePasswordResolver = (
    parent: undefined,
    args: ArgsUpdatePassword,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Account | Promise<Account>;

  export type UpdateProfileResolver = (
    parent: undefined,
    args: ArgsUpdateProfile,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Profile | Promise<Profile>;

  export interface Type {
    createPost: (
      parent: undefined,
      args: ArgsCreatePost,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Post | Promise<Post>;

    deletePost: (
      parent: undefined,
      args: ArgsDeletePost,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Post | Promise<Post>;

    login: (
      parent: undefined,
      args: ArgsLogin,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => LoginPayload | Promise<LoginPayload>;

    signup: (
      parent: undefined,
      args: ArgsSignup,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => LoginPayload | Promise<LoginPayload>;

    updateAccount: (
      parent: undefined,
      args: ArgsUpdateAccount,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Account | Promise<Account>;

    updatePassword: (
      parent: undefined,
      args: ArgsUpdatePassword,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Account | Promise<Account>;

    updateProfile: (
      parent: undefined,
      args: ArgsUpdateProfile,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Profile | Promise<Profile>;
  }
}

export namespace LoginPayloadResolvers {
  export const defaultResolvers = {
    token: (parent: LoginPayload) => parent.token
  };

  export type TokenResolver = (
    parent: LoginPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    token: (
      parent: LoginPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Account: AccountResolvers.Type;
  Profile: ProfileResolvers.Type;
  Image: ImageResolvers.Type;
  Post: PostResolvers.Type;
  Mutation: MutationResolvers.Type;
  LoginPayload: LoginPayloadResolvers.Type;
}
