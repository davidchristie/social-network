# import Image from "../../data-model/generated/graphql-schema/prisma.graphql"
# import Post from "../../data-model/generated/graphql-schema/prisma.graphql"
# import ProfileOrderByInput from "../../data-model/generated/graphql-schema/prisma.graphql"
# import ProfileUpdateManyWithoutFollowersInput from "../../data-model/generated/graphql-schema/prisma.graphql"
# import ProfileUpdateManyWithoutFollowingInput from "../../data-model/generated/graphql-schema/prisma.graphql"
# import ProfileWhereInput from "../../data-model/generated/graphql-schema/prisma.graphql"

input AccountUpdateInput {
  email: String
}

input PasswordUpdateInput {
  currentPassword: String!
  newPassword: String!
}

input ProfileUpdateInput {
  avatarUrl: String
  followers: ProfileUpdateManyWithoutFollowingInput
  following: ProfileUpdateManyWithoutFollowersInput
  name: String
}

type Account {
  email: String!
  id: ID!
  name: String!
  profile: Profile!
}

type LoginPayload {
  token: String!
}

type Mutation {
  createPost(text: String!): Post!
  deletePost(id: ID!): Post!
  followProfile(id: ID!): Profile!
  login(email: String!, password: String!): LoginPayload!
  signup(email: String!, name: String!, password: String!): LoginPayload!
  unfollowProfile(id: ID!): Profile!
  updateAccount(data: AccountUpdateInput): Account!
  updatePassword(data: PasswordUpdateInput): Account!
  updateProfile(data: ProfileUpdateInput!): Profile!
}

type Profile {
  avatar: Image
  followers: [Profile!]!
  following: [Profile!]!
  id: ID!
  name: String!
  posts: [Post!]!
}

type Query {
  account: Account
  profile(id: String!): Profile
  profiles(after: String, before: String, first: Int, last: Int, orderBy: ProfileOrderByInput, skip: Int, where: ProfileWhereInput): [Profile]!
}
