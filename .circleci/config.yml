version: 2

references:

  # Steps

  link-dependencies: &link-dependencies
    run:
      name: Link dependencies
      command: yarn install --offline

  restore-cache: &restore-cache
    restore_cache:
      keys:
        # When lock file changes, use increasingly general patterns to
        # restore cache.
        - v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
        - v1-{{ .Branch }}-
        - v1-

  # Jobs

  build-package: &build-package
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/tmp
      - *restore-cache
      - *link-dependencies
      - run:
          name: Build packages
          command: yarn build
      - setup_remote_docker
      - run:
          name: Build production image
          command: |
              yarn production build $PACKAGE
      - run:
          name: Save image to workspace
          command: |
              mkdir -p tmp/images
              docker save --output tmp/images/$PACKAGE.tar davidchristie/$PACKAGE
      - persist_to_workspace:
          root: tmp
          paths:
            - images/*.tar

  build-task: &build-task
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/tmp
      - *restore-cache
      - *link-dependencies
      - run:
          name: Build packages
          command: yarn build
      - setup_remote_docker
      - run:
          name: Build production image
          command: |
              yarn tasks build $NAME
      - run:
          name: Save image to workspace
          command: |
              mkdir -p tmp/images
              docker save --output tmp/images/$NAME.tar $NAME
      - persist_to_workspace:
          root: tmp
          paths:
            - images/*.tar

  defaults: &defaults
    docker:
    - image: circleci/node:9.11
    working_directory: ~/repo

  pull-image: &pull-image
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/tmp
      - setup_remote_docker
      - run:
          name: Pull image
          command: |
              docker pull $NAME
      - run:
          name: Save image to workspace
          command: |
              mkdir -p tmp/images
              docker save --output tmp/images/$FILE.tar $NAME
      - persist_to_workspace:
          root: tmp
          paths:
            - images/*.tar

  test-package: &test-package
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/tmp
      - *restore-cache
      - *link-dependencies
      - run:
          name: Run unit tests
          command: yarn $PACKAGE test
      - run:
          name: Format coverage report
          command: |
              ./tmp/test-reporter format-coverage -t lcov \
                  -o tmp/coverage.$PACKAGE.json \
                  packages/$PACKAGE/coverage/lcov.info
      - persist_to_workspace:
          root: tmp
          paths:
            - coverage.*.json

jobs:

  build-authentication:
    <<: *defaults
    <<: *build-package
    environment:
      PACKAGE: authentication

  build-deploy-data-model:
    <<: *defaults
    <<: *build-task
    environment:
      NAME: deploy-data-model

  build-integration-tests:
    <<: *defaults
    <<: *build-task
    environment:
      NAME: integration-tests

  build-public-api:
    <<: *defaults
    <<: *build-package
    environment:
      PACKAGE: public-api

  build-web-client:
    <<: *defaults
    <<: *build-package
    environment:
      PACKAGE: web-client

  check-puppeteer:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Check for changes
          command: |
              if [ -z $(git diff --name-only HEAD~ images/puppeteer) ]
              then
                echo "No changes in the last commit"
                circleci step halt
              else
                echo "Was changed in the last commit"
              fi
      - setup_remote_docker
      - run:
          name: Log in to docker
          command: |
              docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      - run:
          name: Set image name
          command: |
              echo 'IMAGE="$DOCKER_USERNAME/puppeteer"' >> $BASH_ENV
              echo 'VERSION="$(git rev-parse --short HEAD)"' >> $BASH_ENV
      - run:
          name: Build image
          command: |
              docker build \
                  --tag $IMAGE:latest \
                  --tag $IMAGE:$VERSION \
                  images/puppeteer
      - run:
          name: Push image
          command: |
              docker push $IMAGE

  download-test-reporter:
    <<: *defaults
    steps:
      - run:
          name:  Download test reporter
          command: |
            mkdir -p tmp/
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./tmp/test-reporter
            chmod +x ./tmp/test-reporter
      - persist_to_workspace:
          root: tmp
          paths:
            - test-reporter

  install-dependencies:
    <<: *defaults
    steps:
      - checkout
      - *restore-cache
      - run:
          name: Install dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          paths:
            - node_modules
            - ~/.cache/yarn
          key: v1-{{ .Branch }}-{{ checksum "yarn.lock" }}

  integration-tests:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/tmp
      - *restore-cache
      - *link-dependencies
      - setup_remote_docker
      - run:
          name: Load images from workspace
          command: |
              docker load < tmp/images/authentication.tar
              docker load < tmp/images/deploy-data-model.tar
              docker load < tmp/images/integration-tests.tar
              docker load < tmp/images/mysql.tar
              docker load < tmp/images/prisma.tar
              docker load < tmp/images/public-api.tar
              docker load < tmp/images/puppeteer.tar
              docker load < tmp/images/web-client.tar
      - run:
          name: Start production services
          command: |
              yarn production up --detach
      - run:
          name: List production images
          command: yarn production images
      - run:
          name: List production containers
          command: yarn production ps
      - run:
          name: Deploy Prisma data-model
          command: yarn tasks up deploy-data-model
      - run:
          name: Run integration tests
          command: yarn tasks up integration-tests

  pull-mysql:
    <<: *defaults
    <<: *pull-image
    environment:
      FILE: mysql
      NAME: mysql:5.7

  pull-prisma:
    <<: *defaults
    <<: *pull-image
    environment:
      FILE: prisma
      NAME: prismagraphql/prisma:1.8

  pull-puppeteer:
    <<: *defaults
    <<: *pull-image
    environment:
      FILE: puppeteer
      NAME: davidchristie/puppeteer

  test-authentication:
    <<: *defaults
    <<: *test-package
    environment:
      PACKAGE: authentication

  test-public-api:
    <<: *defaults
    <<: *test-package
    environment:
      PACKAGE: public-api

  test-web-client:
    <<: *defaults
    <<: *test-package
    environment:
      PACKAGE: web-client

  upload-coverage:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo/tmp
      - run:
          name: Upload coverage results to Code Climate
          command: |
            ./tmp/test-reporter sum-coverage tmp/coverage.*.json \
                --parts 3 \
                --output tmp/coverage.total.json
            ./tmp/test-reporter upload-coverage \
              --id $CODE_CLIMATE_TEST_REPORTER_ID \
              --input tmp/coverage.total.json

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build-authentication:
          requires:
            - upload-coverage
      - build-integration-tests
      - build-deploy-data-model
      - build-public-api:
          requires:
            - upload-coverage
      - build-web-client:
          requires:
            - upload-coverage
      - check-puppeteer
      - download-test-reporter
      - install-dependencies
      - integration-tests:
          requires:
            - build-authentication
            - build-deploy-data-model
            - build-integration-tests
            - build-public-api
            - build-web-client
            - pull-mysql
            - pull-prisma
            - pull-puppeteer
      - pull-mysql
      - pull-prisma
      - pull-puppeteer:
          requires:
            - check-puppeteer
      - test-authentication:
          requires:
            - download-test-reporter
            - install-dependencies
      - test-public-api:
          requires:
            - download-test-reporter
            - install-dependencies
      - test-web-client:
          requires:
            - download-test-reporter
            - install-dependencies
      - upload-coverage:
          requires:
            - test-authentication
            - test-public-api
            - test-web-client
