version: 2

references:

  # Steps

  kubectl-apply: &kubectl-apply
    command: kubectl apply -f $FILE

  link-dependencies: &link-dependencies
    run:
      name: Link dependencies
      command: yarn install --offline

  restore-cached-dependencies: &restore-cached-dependencies
    restore_cache:
      keys:
        # When lock file changes, use increasingly general patterns to
        # restore cache.
        - v1-dependencies-{{ .Branch }}-{{ checksum "yarn.lock" }}
        - v1-dependencies-{{ .Branch }}-
        - v1-dependencies

  # Jobs

  build-service: &build-service
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/tmp
      - *restore-cached-dependencies
      - *link-dependencies
      - run:
          name: Build packages
          command: yarn build
      - setup_remote_docker
      - run:
          name: Build production image
          command: |
              export VERSION="$(git rev-parse --short HEAD)"
              yarn production build $NAME
      - run:
          name: Save image to workspace
          command: |
              mkdir -p tmp/images
              docker save --output tmp/images/$NAME.tar davidchristie/$NAME
      - persist_to_workspace:
          root: tmp
          paths:
            - images/*.tar

  deploy-service: &deploy-service
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/tmp
      - setup_remote_docker
      - run:
          name: Load images from workspace
          command: |
              docker load < tmp/images/$NAME.tar
      - run:
          name: List images
          command: docker images
      - run:
          name: Log in to docker
          command: |
              docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      - run:
          name: Push image
          command: |
              export VERSION="$(git rev-parse --short HEAD)"
              yarn production push $NAME

  defaults: &defaults
    docker:
    - image: circleci/node:10
    working_directory: ~/repo

jobs:

  build-authentication:
    <<: *defaults
    <<: *build-service
    environment:
      NAME: authentication

  build-packages:
    <<: *defaults
    steps:
      - checkout
      - *restore-cached-dependencies
      - *link-dependencies
      - run:
          name: Build packages
          command: yarn build
      - run:
          name: Check code for errors
          command: yarn lint

  build-public-api:
    <<: *defaults
    <<: *build-service
    environment:
      NAME: public-api

  build-web-client:
    <<: *defaults
    <<: *build-service
    environment:
      NAME: web-client

  deploy-authentication:
    <<: *defaults
    <<: *deploy-service
    environment:
      NAME: authentication

  deploy-public-api:
    <<: *defaults
    <<: *deploy-service
    environment:
      NAME: public-api

  deploy-web-client:
    <<: *defaults
    <<: *deploy-service
    environment:
      NAME: web-client

  install-dependencies:
    <<: *defaults
    steps:
      - checkout
      - *restore-cached-dependencies
      - run:
          name: Install dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          paths:
            - node_modules
            - ~/.cache/yarn
          key: v1-dependencies-{{ .Branch }}-{{ checksum "yarn.lock" }}

  integration-tests:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/tmp
      - *restore-cached-dependencies
      - *link-dependencies
      - restore_cache:
          keys:
            - v1-images-mysql:5.7
      - restore_cache:
          keys:
            - v1-images-prismagraphql/prisma:1.8
      - setup_remote_docker
      - run:
          name: Load images from workspace
          command: |
              docker load < tmp/images/authentication.tar
              docker load < tmp/images/mysql.tar
              docker load < tmp/images/prisma.tar
              docker load < tmp/images/public-api.tar
              docker load < tmp/images/web-client.tar
      - run:
          name: Start production services
          command: |
              export VERSION="$(git rev-parse --short HEAD)"
              yarn production up --detach
      - run:
          name: Deploy Prisma data-model
          command: yarn tasks run deploy-data-model
      - run:
          name: Run integration tests
          command: yarn tasks run integration-tests
      - run:
          name: List docker images
          command: docker images

  pull-images:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Make tmp/images directory
          command: mkdir -p tmp/images
      - run:
          name: Pull mysql image
          command: |
              docker pull mysql:5.7
              docker save --output tmp/images/mysql.tar mysql:5.7
      - run:
          name: Pull prisma image
          command: |
              docker pull prismagraphql/prisma:1.8
              docker save --output tmp/images/prisma.tar prismagraphql/prisma:1.8
      - save_cache:
          name: Cache mysql image
          key: v1-images-mysql:5.7
          paths:
            - tmp/images/mysql.tar
      - save_cache:
          name: Cache prisma image
          key: v1-images-prismagraphql/prisma:1.8
          paths:
            - tmp/images/prisma.tar

  unit-tests:
    <<: *defaults
    steps:
      - checkout
      - *restore-cached-dependencies
      - *link-dependencies
      - run:
          name: Build libraries
          command: yarn build-libraries
      - run:
          name: Test authentication
          command: yarn authentication test --coverage
      - run:
          name: Test design-system
          command: yarn design-system test --coverage
      - run:
          name: Test public-api
          command: yarn public-api test --coverage
      - run:
          name: Test web-client
          command: yarn web-client test --coverage
      - run:
          name: Download test reporter
          command: |
            mkdir -p tmp/
              curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./tmp/test-reporter
              chmod +x ./tmp/test-reporter
      - run:
          name: Format coverage report
          command: |
            ./tmp/test-reporter format-coverage -t lcov \
                  -o tmp/coverage.authentication.json \
                  packages/backend/authentication/coverage/lcov.info

            ./tmp/test-reporter format-coverage -t lcov \
                  -o tmp/coverage.design-system.json \
                  packages/frontend/design-system/coverage/lcov.info

            ./tmp/test-reporter format-coverage -t lcov \
                  -o tmp/coverage.public-api.json \
                  packages/backend/public-api/coverage/lcov.info

            ./tmp/test-reporter format-coverage -t lcov \
                  -o tmp/coverage.web-client.json \
                  packages/frontend/web-client/coverage/lcov.info

            ./tmp/test-reporter sum-coverage tmp/coverage.*.json \
              --parts 4 \
              --output tmp/coverage.total.json
      - run:
          name: Upload report
          command: |
            ./tmp/test-reporter upload-coverage \
              --id $CODE_CLIMATE_TEST_REPORTER_ID \
              --input tmp/coverage.total.json

  update-cluster:
    docker:
      - image: google/cloud-sdk
    working_directory: ~/project
    environment:
      GOOGLE_PROJECT_ID: social-network-219921
      GOOGLE_COMPUTE_ZONE: australia-southeast1-a
      GOOGLE_CLUSTER_NAME: social-network
    steps:
      - checkout
      - run:
          name: Store service account key
          command: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run:
          name: Login to Google Cloud SDK
          command: |
            gcloud auth activate-service-account \
              --key-file=${HOME}/gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}
      - run:
          name: Install envsubst
          command: apt-get install -y gettext
      - run:
          name: Make updated directory
          command: mkdir updated
      - run:
          name: Update authentication deployment
          command: |
            export VERSION="$(git rev-parse --short HEAD)"
            envsubst < packages/infrastructure/definitions/authentication/deployment.yml > updated/authentication-deployment.yml
            kubectl apply -f updated/authentication-deployment.yml
      - run:
          name: Update public-api deployment
          command: |
            export VERSION="$(git rev-parse --short HEAD)"
            envsubst < packages/infrastructure/definitions/public-api/deployment.yml > updated/public-api-deployment.yml
            kubectl apply -f updated/public-api-deployment.yml
      - run:
          <<: *kubectl-apply
          name: Update public-api service
          environment:
            FILE: packages/infrastructure/definitions/public-api/service.yml
      - run:
          <<: *kubectl-apply
          name: Update public-api ingress
          environment:
            FILE: packages/infrastructure/definitions/public-api/ingress.yml
      - run:
          name: Update web-client deployment
          command: |
            export VERSION="$(git rev-parse --short HEAD)"
            envsubst < packages/infrastructure/definitions/web-client/deployment.yml > updated/web-client-deployment.yml
            kubectl apply -f updated/web-client-deployment.yml
      - run:
          <<: *kubectl-apply
          name: Update web-client service
          environment:
            FILE: packages/infrastructure/definitions/web-client/service.yml
      - run:
          <<: *kubectl-apply
          name: Update web-client ingress
          environment:
            FILE: packages/infrastructure/definitions/web-client/ingress.yml

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build-authentication:
          requires:
            - build-packages
            - unit-tests
      - build-packages:
          requires:
            - install-dependencies
      - build-public-api:
          requires:
            - build-packages
            - unit-tests
      - build-web-client:
          requires:
            - build-packages
            - unit-tests
      - deploy-authentication:
          requires:
            - integration-tests
          filters:
            branches:
              only: master
      - deploy-public-api:
          requires:
            - integration-tests
          filters:
            branches:
              only: master
      - deploy-web-client:
          requires:
            - integration-tests
          filters:
            branches:
              only: master
      - install-dependencies
      - integration-tests:
          requires:
            - build-authentication
            - build-public-api
            - build-web-client
            - pull-images
      - pull-images
      - unit-tests:
          requires:
            - install-dependencies
      - update-cluster:
          requires:
            - deploy-authentication
            - deploy-public-api
            - deploy-web-client
          filters:
            branches:
              only: master
